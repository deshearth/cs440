class WordSudoku:
	self.stat			# contain number of all letters;
						  contain the number of different letters

	self.variables		# variables are words' initial, but store 
                          it as the whole word
    self.variablesNet   # show how the variables are relating to
                          each other
	self.domains		# domain are coordinates of grids
	self.constraints	# indices have to be in the 9x9 grid;
						  all rows cannot have repetitive letters;
						  all columns cannot have repetitive letters;
						  3x3 unit cannot have repetitive letter;
                          member wordInBoundary
                                 noWordCollision
                                 ableToFill
                          constrainsts should be a method
    self.option         # is there any decoy words
                          if there is decoy word, include -1 in boundary,
                          and there is no need to check collision in -1.
	self.unassigned
    self.assignment     #
    self.inference      # assignment and inference would be a ADS
                          assignment.word is a dictionary,
                            which is a variable-value corresponding.
                          assignment.grid is a matrix 
                            which is like auxiliary information to 
                            meke sure that there is no wordCollision
                            first constraint needed to satisfy is that
                            there is no collision of word's initial
     
	method  :
    def rightShape(self):
        wordInBoundary();
        noWordCollision():
        ableToFill(); # the sum of word' s letters that are inside the
                        grid - sum(max(0,each kind of repetitive letter - 9))


	def goalTest(self, state):
		return true of false

	def assign(self, state):
		return newState

	def solution(self):
        ; 
    def initialization(self):
        ;

    #helper function    
    


def solveSudoku:
	backtrack({}, csp)
	return a solution or failure

def backtrack(assignment, csp):
	if csp.goalTest(csp.state)
		return assignment
	var <- selectUnassignedVariable(csp)
	for each value in orderDomainValue(var, assignment, csp)
		if value is consistent with assignment
			add{var=value} to assignment
			inferences <- inference(csp, var, value)
		if inferences != failure
			add inferences to assignment
			result <- backtrack(assignment, csp) 
			if result != failure
				return result
		remove {var=value} and inferences from assignment
	return failure

def selectUnassignedVariable(csp):
	;	

def orderDomainValue(var, assignment, csp):
	;

def inference(csp, var, value):
    	


